{"version":3,"sources":["../node_modules/iam-client-lib/dist lazy groupOptions: {} namespace object","components/Toast/Toast.tsx","components/AppNav/AppNav.tsx","api/VoltaApi.ts","api/BaseApi.ts","api/ApiResult.ts","api/Transaction.ts","components/EwTransaction/EwTransaction.tsx","components/EwAccount/EwAccount.tsx","components/ENS/ENS.tsx","components/Home/Home.tsx","asset/key-manager-icon.svg","asset/metamask-logo.svg","asset/wallet-connect-icon.svg","components/IAM/IAM.tsx","components/Login/Login.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","toastComponentList","defaultOptions","time","className","position","renderDOM","container","document","getElementById","ReactDOM","render","TransitionGroup","classnames","map","t","CSSTransition","timeout","classNames","component","Toast","message","contentClassName","clickable","onClick","messageDOM","useRef","useLayoutEffect","current","clientHeight","height","style","setTimeout","contentClassNames","filter","Boolean","join","clickableProps","tabIndex","role","ref","toast","timeOrOptions","config","undefined","console","error","Array","isArray","Date","now","push","index","findIndex","splice","AppNav","accounts","chain","Navbar","bg","expand","Brand","href","Toggle","Collapse","Nav","Link","length","navigator","clipboard","writeText","account","slice","getAccount","VoltaApi","setLoading","baseUrl","apiVersion","queryParams","method","body","this","apiRequest","res","ok","handleError","address","block","a","action","apiRequestWrapper","json","addresses","apiQueryParams","getTransactionsList","getBalance","getTokenList","tx","balance","token","path","url","queryStringify","httpRequest","headers","Headers","append","options","JSON","stringify","debug","fetch","errMsg","status","statusText","obj","str","p","hasOwnProperty","encodeURIComponent","ApiResult","value","pointIndex","Math","max","zeroesToAdd","minIndex","i","repeat","decimalNumber","Transaction","transaction","blockHash","blockNumber","confirmations","contractAddress","cumulativeGasUsed","from","gas","gasPrice","gasUsed","hash","input","isError","nonce","timeStamp","to","transactionIndex","txreceipt_status","Number","toUTCString","convertVT","shortenAddress","toLowerCase","EwTransaction","transactionUrl","fromAddressUrl","shortFrom","shortTo","valueVt","gasVt","blockNumberUrl","UTCTimestamp","isInTransaction","EwAccount","Card","Body","Title","window","location","goToAddress","result","scope","getTransactionsComponent","ENS","web3","voltaApi","useState","setError","setAddress","loading","useForm","register","errors","formState","handleSubmit","reset","isName","name","endsWith","isAddress","test","onSubmit","search","newAddress","eth","ens","getAddress","genericError","startsWith","notFoundError","unrecognizedError","useEffect","getAccountInfo","accountInfo","catch","finally","Form","InputGroup","hasValidation","FormControl","required","emptyError","validate","val","type","placeholder","isInvalid","Control","Feedback","Button","variant","disabled","Spinner","animation","getAccountComponent","Home","Img","Text","setCacheClientOptions","setChainConfig","rpcUrl","Iam","iam","IAM","roles","setRoles","did","setDID","errored","setErrored","unauthorized","setUnauthorized","login","initOptions","initializeConnection","identityToken","credentials","backendUrl","data","logout","closeConnection","loadingMessage","enrolmentButton","enrolmentUrl","loginResults","namespace","loginOptions","walletProvider","WalletProvider","WalletConnect","alt","src","walletconnectIcon","MetaMask","metamaskLogo","EwKeyManager","KMLogo","errorMessage","unauthorizedMessage","Login","setAccounts","setWeb3","setChain","onboarding","React","MetaMaskOnboarding","handleAccounts","stopOnboarding","noAccountError","isMetaMaskInstalled","detectEthereumProvider","provider","request","accountConnectionSentError","currentWeb3","Web3","getAccounts","net","getNetworkType","noProviderError","startOnboarding","providerEventSetup","newWeb3","removeListener","on","_","log","setup","includes","App","allowedChain","showMain","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.4948224c.chunk.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 1189;","import React, { ReactElement, SyntheticEvent, useLayoutEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Toast.css';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\ntype contentType = 'normal' | 'muted' | 'primary' | 'secondary' | 'warning' | 'danger' | 'success' | 'info';\n\nexport interface ToastOptions {\n  time?: number;\n  className?: string;\n  clickable?: boolean;\n  contentClassName?: string;\n  onClick?: (e: SyntheticEvent<HTMLDivElement>) => void | Promise<void>;\n}\n\nexport interface ConfigArgs extends Pick<ToastOptions, 'time' | 'className'> {\n  position?: 'left' | 'center' | 'right';\n}\n\nexport interface ToastProps extends Pick<ToastOptions, 'className' | 'clickable' | 'onClick' | 'contentClassName'> {\n  message: string;\n}\n\nlet toastComponentList: any[] = [];\nconst init = () => {\n  const toastContainer = document.getElementById('toast_container');\n  if (!toastContainer) {\n    console.error(\"No toast_container element\")\n  }\n  if (!toastComponentList || !Array.isArray(toastComponentList)) {\n    toastComponentList = [];\n  }\n};\n\nconst defaultOptions: Required<ConfigArgs> = {\n  time: 3000,\n  className: '',\n  position: 'center',\n};\n\nexport const toastConfig = (options: ConfigArgs) => {\n  if (options.time) defaultOptions.time = options.time;\n  if (options.className) defaultOptions.className = options.className;\n  if (options.position) defaultOptions.position = options.position;\n};\n\nconst renderDOM = () => {\n  const container = document.getElementById('toast_container');\n  const position = defaultOptions.position || 'center';\n\n  ReactDOM.render(\n    <div className={`toast-list ${position}`}>\n      <TransitionGroup classnames=\"list\">\n        {toastComponentList.map(t => (\n          <CSSTransition key={t.id} timeout={300} classNames=\"toast\">\n            {t.component}\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </div>,\n    container,\n  );\n};\n\nconst Toast = ({\n  message,\n  className,\n  contentClassName,\n  clickable,\n  onClick,\n}: ToastProps): ReactElement => {\n  const messageDOM: any = useRef();\n\n  useLayoutEffect(() => {\n    if (messageDOM.current && messageDOM.current.clientHeight) {\n      const height = messageDOM.current.clientHeight;\n      messageDOM.current.style.height = '0px';\n      setTimeout(() => {\n        if (messageDOM && messageDOM.current)\n          messageDOM.current.style.height = `${height}px`;\n      }, 0);\n    }\n  });\n\n  const contentClassNames = [\n    'toast-content',\n    clickable ? 'clickable' : '',\n    contentClassName\n  ].filter(Boolean).join(' ');\n\n  const clickableProps = {\n    onClick,\n    tabIndex: 0,\n    role: 'button',\n  };\n\n  return (\n    <div ref={messageDOM} className={`toast-message ${className}`}>\n      <div\n        className={contentClassNames}\n        {...clickable && clickableProps}\n      >\n        {message}\n      </div>\n    </div>\n  );\n};\n\nfunction toast(message: string, time?: number): void;\nfunction toast(message: string, contentType?: contentType): void;\nfunction toast(message: string, options?: ToastOptions): void;\nfunction toast(message: string, timeOrOptions?: number | ToastOptions | contentType): void {\n  let config: ToastOptions;\n  switch (typeof timeOrOptions) {\n    case 'string':\n      config = { contentClassName: `text-${timeOrOptions}` }\n      break;\n    case 'number':\n      config = { time: timeOrOptions }\n      break;\n    default:\n      config = timeOrOptions || {};\n  }\n  const {\n    time = defaultOptions.time,\n    clickable = false,\n    className = defaultOptions.className,\n    contentClassName = \"\",\n    onClick = undefined,\n  } = config;\n\n  init();\n  renderDOM();\n\n  const id = Date.now();\n  toastComponentList.push({\n    id,\n    component: (\n      <Toast\n        message={message}\n        className={className}\n        clickable={clickable}\n        onClick={onClick}\n        contentClassName={contentClassName}\n      />\n    ),\n  });\n\n  renderDOM();\n  setTimeout(() => {\n    const index = toastComponentList.findIndex(t => t.id === id);\n    toastComponentList.splice(index, 1);\n    renderDOM();\n  }, time);\n}\n\nexport default toast;","import React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport toast from '../Toast/Toast';\nimport './AppNav.css'\n\ntype Props = {\n  accounts: string[];\n  chain: string;\n};\n\nfunction AppNav({ accounts, chain }: Props) {\n  const getAccount = () => {\n    if (accounts.length === 0)\n      return \"\";\n    const account = accounts[0];\n    return `${account.slice(0, 6)}...${account.slice(-4)}`;\n  }\n  const onClickAccount = () => {\n    navigator.clipboard.writeText(accounts[0]);\n    toast(\"Address copied to clipboard\");\n  }\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">Energy Web Dapp showcase</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"me-auto\">\n          <Nav.Link href=\"#home\">Home</Nav.Link>\n          <Nav.Link href=\"#ens\">ENS</Nav.Link>\n          <Nav.Link href=\"#did\">DID</Nav.Link>\n          <Nav.Link href=\"#iam\">IAM</Nav.Link>\n        </Nav>\n        <Nav className=\"connection-info\">\n          {accounts.length > 0 && (<p className=\"account-info text-muted\" onClick={onClickAccount}>{getAccount()}</p>)}\n          {chain && (<p className=\"chain-info text-info\">{chain}</p>)}\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default AppNav;\n","import BaseApi from \"./BaseApi\";\n\ntype sort = 'asc' | 'desc';\ntype status = '0' | '1';\n\ntype baseVoltaResponse = {\n    message: string\n    status: status\n}\n\n/**\n * Api query parameters\n **/\ntype queryParams = {\n    module: string\n    action: string\n    [key: string]: any\n}\ntype getAccountQueryParams = {\n    sort?: sort\n    startblock?: number\n    endblock?: number\n    page?: number\n    offset?: number\n    filterby?: string\n    starttimestamp?: number\n    endtimestamp?: number\n}\n\n/**\n * Api responses result fields\n **/\nexport type getBalanceMultiSingleResponse = {\n    account: string\n    balance: string\n    stale: boolean\n}\n\nexport interface getTransactionListSingleResponse {\n    blockHash: string\n    blockNumber: string\n    confirmations: string\n    contractAddress: string\n    cumulativeGasUsed: string\n    from: string\n    gas: string\n    gasPrice: string\n    gasUsed: string\n    hash: string\n    input: string\n    isError: status\n    nonce: string\n    timeStamp: string\n    to: string\n    transactionIndex: string\n    txreceipt_status: string\n    value: string\n}\n\nexport type getTokenListSingleResponse = {\n    balance: string\n    contractAddress: string\n    decimals: string\n    name: string\n    symbol: string\n    type: string\n}\n\n/**\n * Api responses\n **/\nexport type getEthBalanceResponse = {\n    id: number\n    result: string\n    jsonrpc: string\n}\n\nexport type getBalanceResponse = baseVoltaResponse & {\n    result: string\n}\n\nexport type getBalanceMultiResponse = baseVoltaResponse & {\n    result: getBalanceMultiSingleResponse[]\n}\n\nexport type getTransactionsListResponse = baseVoltaResponse & {\n    result: getTransactionListSingleResponse[]\n}\n\nexport type getTokenListResponse = baseVoltaResponse & {\n    result: getTokenListSingleResponse[]\n}\n\nexport type getAccountInfoResponse = {\n    tx: getTransactionsListResponse\n    balance: getBalanceResponse\n    token: getTokenListResponse\n}\n\n\nclass VoltaApi extends BaseApi {\n    override readonly baseUrl: string = \"https://volta-explorer.energyweb.org/api\";\n    override readonly apiVersion: string = \"v1\";\n\n    constructor(public setLoading?: (loading: boolean) => void) {\n        super();\n    }\n\n    private async apiRequestWrapper(queryParams?: queryParams, method: string = \"GET\", body?: queryParams) {\n        if (this.setLoading) this.setLoading(true);\n        const res = await this.apiRequest(\"\", method, queryParams, body);\n        if (!res.ok) this.handleError(res);\n        if (this.setLoading) this.setLoading(false);\n        return res;\n    }\n\n    async getEthBalance(address: string, block?: string): Promise<getEthBalanceResponse> {\n        const queryParams: queryParams = {\n            module: \"account\",\n            action: \"eth_get_balance\",\n            address: address,\n            block: block,\n        }\n        const res = await this.apiRequestWrapper(queryParams);\n        return await res.json();\n    }\n\n    async getBalance(address: string): Promise<getBalanceResponse> {\n        const queryParams: queryParams = {\n            module: \"account\",\n            action: \"balance\",\n            address: address,\n        }\n        const res = await this.apiRequestWrapper(queryParams);\n        return await res.json();\n    }\n\n    async getBalanceMulti(...addresses: string[]): Promise<getBalanceMultiResponse> {\n        const queryParams: queryParams = {\n            module: \"account\",\n            action: \"balancemulti\",\n            address: addresses.join(\",\"),\n        }\n        const res = await this.apiRequestWrapper(queryParams);\n        return await res.json();\n    }\n\n    async getTransactionsList(address: string, queryParams?: getAccountQueryParams): Promise<getTransactionsListResponse> {\n        const apiQueryParams: queryParams = {\n            module: \"account\",\n            action: \"txlist\",\n            address: address,\n            ...queryParams,\n        }\n        const res = await this.apiRequestWrapper(apiQueryParams);\n        return await res.json();\n    }\n\n    async getTokenList(address: string): Promise<getTokenListResponse> {\n        const queryParams: queryParams = {\n            module: \"account\",\n            action: \"tokenlist\",\n            address: address,\n        }\n        const res = await this.apiRequestWrapper(queryParams);\n        return await res.json();\n    }\n\n    async getAccountInfo(address: string): Promise<getAccountInfoResponse> {\n        return {\n            tx: await this.getTransactionsList(address),\n            balance: await this.getBalance(address),\n            token: await this.getTokenList(address),\n        }\n    }\n\n}\n\nexport default VoltaApi;","export type genericObject = {\n    [key: string]: any\n};\n\nclass BaseApi {\n    readonly baseUrl: string = \"\";\n    readonly apiVersion: string = \"v1\";\n\n    protected apiRequest(path?: string, method: string = \"GET\", queryParams?: genericObject, body?: genericObject) {\n        let url = path ? `${this.baseUrl}/${path}` : this.baseUrl;\n        if (queryParams) {\n            url += `?${this.queryStringify(queryParams)}`;\n        }\n        return this.httpRequest(url, method, body);\n    }\n\n    protected httpRequest(url: string, method: string = \"GET\", body?: genericObject) {\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        let options: RequestInit = { headers: headers, method: method };\n        if (body) {\n            options.body = JSON.stringify(body);\n        }\n        console.debug(`Fetch - ${method} - ${url}`);\n        return fetch(url, options);\n    }\n\n    protected handleError(error: Response) {\n        const errMsg = error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        console.error(errMsg);\n        throw (errMsg);\n    }\n\n    protected queryStringify(obj: genericObject) {\n        let str = [];\n        for (let p in obj) {\n            if (obj.hasOwnProperty(p) && obj[p] !== null && obj[p] !== undefined) {\n                str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join(\"&\");\n    }\n}\nexport default BaseApi;","class ApiResult {\n    readonly baseUrl = 'https://volta-explorer.energyweb.org';\n\n    protected constructor() { }\n\n    static shortenAddress(address: string) {\n        return address ? `${address.slice(0, 8)}...${address.slice(-6)}` : \"\";\n    }\n    static convertVT(value: string) {\n        if (!value || value === \"0\") return \"0\";\n        const decimals = 18;\n        const pointIndex = Math.max(1, (value.length) - decimals);\n        const zeroesToAdd = Math.max(-1, decimals - value.length);\n        let minIndex = 0;\n        for (let i = value.length - 1; i >= 0; i--) {\n            const element = value[i];\n            if (element === \"0\")\n                continue;\n            else {\n                minIndex = i;\n                break;\n            }\n        }\n        if (zeroesToAdd >= 0)\n            return `0.${\"0\".repeat(zeroesToAdd)}${value.slice(0, minIndex + 1)}`;\n        const decimalNumber = minIndex >= pointIndex ? `.${value.slice(pointIndex, minIndex + 1)}` : \"\";\n        return `${value.slice(0, pointIndex)}${decimalNumber}`;\n    }\n}\n\nexport default ApiResult;\n","import ApiResult from './ApiResult';\nimport { getTransactionListSingleResponse } from './VoltaApi'\n\nclass Transaction extends ApiResult implements getTransactionListSingleResponse {\n    blockHash: string;\n    blockNumber: string;\n    confirmations: string;\n    contractAddress: string;\n    cumulativeGasUsed: string;\n    from: string;\n    gas: string;\n    gasPrice: string;\n    gasUsed: string;\n    hash: string;\n    input: string;\n    isError: '0' | '1';\n    nonce: string;\n    timeStamp: string;\n    to: string;\n    transactionIndex: string;\n    txreceipt_status: string;\n    value: string;\n\n    constructor(transaction: getTransactionListSingleResponse) {\n        super();\n        this.blockHash = transaction.blockHash;\n        this.blockNumber = transaction.blockNumber;\n        this.confirmations = transaction.confirmations;\n        this.contractAddress = transaction.contractAddress;\n        this.cumulativeGasUsed = transaction.cumulativeGasUsed;\n        this.from = transaction.from;\n        this.gas = transaction.gas;\n        this.gasPrice = transaction.gasPrice;\n        this.gasUsed = transaction.gasUsed;\n        this.hash = transaction.hash;\n        this.input = transaction.input;\n        this.isError = transaction.isError;\n        this.nonce = transaction.nonce;\n        this.timeStamp = transaction.timeStamp;\n        this.to = transaction.to;\n        this.transactionIndex = transaction.transactionIndex;\n        this.txreceipt_status = transaction.txreceipt_status;\n        this.value = transaction.value;\n    }\n\n    get method() {\n        switch (this.input) {\n            case '0x':\n                return \"Transfer\";\n            // TODO: add more cases for other transaction methods (e.g. Store, SetAttribute, etc.)\n            default:\n                return this.input.slice(0, 10);\n        }\n    }\n    get UTCTimestamp() {\n        const d = new Date(Number(this.timeStamp) * 1000);\n        return d.toUTCString().slice(0, -4);\n    }\n    get transactionUrl() {\n        return `${this.baseUrl}/tx/${this.hash}/internal-transactions`;\n    }\n    get blockNumberUrl() {\n        return `${this.baseUrl}/blocks/${this.blockNumber}/transactions`;\n    }\n    get fromAddressUrl() {\n        return `${this.baseUrl}/address/${this.from}/transactions`;\n    }\n    get toAddressUrl() {\n        return `${this.baseUrl}/address/${this.to}/transactions`;\n    }\n    get valueVt() {\n        return Transaction.convertVT(this.value);\n    }\n    get gasVt() {\n        return Transaction.convertVT(this.gas);\n    }\n    get shortTo() {\n        return Transaction.shortenAddress(this.to);\n    }\n    get shortFrom() {\n        return Transaction.shortenAddress(this.from);\n    }\n\n    isInTransaction(address: string) {\n        return this.to.toLowerCase() === address.toLowerCase();\n    }\n}\n\nexport default Transaction;\n","import React from 'react';\nimport Transaction from '../../api/Transaction';\nimport { getTransactionListSingleResponse } from '../../api/VoltaApi';\n\n\ntype Props = {\n    address: string\n    transaction: getTransactionListSingleResponse\n};\n\nfunction EwTransaction({ transaction, address }: Props) {\n    const tx = new Transaction(transaction);\n\n    return (\n        <div className=\"\">\n            <div className=\"row tile-body\">\n                <div className=\"col-md-2 d-flex flex-row flex-md-column\">\n                    <span className=\"tile-label\">\n                        Transaction\n                    </span>\n                    <span className=\"badge title-badge\">\n                        {transaction.isError === \"1\" ? 'Error' : 'Success'}\n                    </span>\n                </div>\n                <div className=\"col-md-7 col-lg-8 d-flex flex-column pr-2 pr-sm-2 pr-md-0\">\n                    <span>\n                        <div className=\"text-truncate d-flex\">\n                            <a className=\"text-truncate\" href={tx.transactionUrl}>\n                                {tx.hash}\n                            </a>\n                            <div className=\"ml-1\">\n                                {tx.method}\n                            </div>\n                        </div>\n                    </span>\n                    <span>\n                        <a href={tx.fromAddressUrl}>\n                            <span>\n                                <span className=\"d-none d-md-none d-xl-inline\">{tx.from}</span>\n                                <span className=\"d-md-inline-block d-xl-none\">{tx.shortFrom}</span>\n                            </span>\n                        </a>\n                        →\n                        <span>\n                            <span className=\"d-none d-md-none d-xl-inline\">{tx.to || address}</span>\n                            <span className=\"d-md-inline-block d-xl-none\">{tx.shortTo || Transaction.shortenAddress(address)}</span>\n                        </span>\n                    </span>\n                    <span className=\"d-flex flex-md-row flex-column mt-3 mt-md-0\">\n                        <span className=\"tile-title\">\n                            {tx.valueVt} VT\n                        </span>\n                        <span className=\"ml-0 ml-md-1 text-nowrap text-muted\">\n                            {tx.gasVt} TX Fee\n                        </span>\n                    </span>\n                </div>\n                <div className=\"col-md-3 col-lg-2 d-flex flex-row flex-md-column flex-nowrap justify-content-center text-md-right mt-3 mt-md-0 tile-bottom\">\n                    <span className=\"mr-2 mr-md-0 order-1\">\n                        <a href={tx.blockNumberUrl}>Block #{tx.blockNumber}</a>\n                    </span>\n                    <span className=\"mr-2 mr-md-0 order-2\">{tx.UTCTimestamp}</span>\n                    <span className=\"mr-2 mr-md-0 order-0 order-md-3\">\n                        {tx.to && (\n                            <span className={`badge badge-${tx.isInTransaction(address) ? \"success\" : \"warning\"} tile-badge`}>\n                                {tx.isInTransaction(address) ? \"IN\" : \"OUT\"}\n                            </span>\n                        )}\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default EwTransaction;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport ApiResult from '../../api/ApiResult';\nimport { getAccountInfoResponse } from '../../api/VoltaApi';\nimport EwTransaction from '../EwTransaction/EwTransaction';\nimport './EwAccount.css';\n\ntype Props = {\n    address: string\n    account: getAccountInfoResponse\n};\n\nfunction EwAccount({ account, address }: Props) {\n\n    const getTransactionsComponent = (account: getAccountInfoResponse) => {\n        return account.tx.result.slice(0, 10)\n            .map((tx, i) => <tr key={i}><td><EwTransaction transaction={tx} address={address}></EwTransaction></td></tr>)\n    }\n\n    const goToAddress = (address: string) => {\n        window.location.href = `https://volta-explorer.energyweb.org/address/${address}/transactions`\n    }\n\n    return (\n        <Card className=\"text-center border-primary\">\n            <Card.Body>\n                <Card.Title className=\"address-info\" onClick={() => goToAddress(address)}>{address}</Card.Title>\n                <p><b>Balance:</b><span>{ApiResult.convertVT(account.balance.result)} VT</span></p>\n                <p><span>{account.token.result.length}</span><b> tokens</b></p>\n                <hr></hr>\n                <table className=\"table table-hover\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">Transactions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {getTransactionsComponent(account)}\n                    </tbody>\n                </table>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default EwAccount;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Button, Card, Form, FormControl, InputGroup, Spinner } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport Web3 from 'web3';\nimport VoltaApi, { getAccountInfoResponse } from '../../api/VoltaApi';\nimport EwAccount from '../EwAccount/EwAccount';\nimport { genericError, notFoundError, unrecognizedError, emptyError } from './ENS.json';\n\ntype Props = {\n  web3?: Web3;\n};\n\ntype FormInput = {\n  search: string;\n}\n\nfunction ENS({ web3 }: Props) {\n  const voltaApi = useRef(new VoltaApi());\n  const account = useRef<getAccountInfoResponse>();\n  const [error, setError] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const { register, formState: { errors }, handleSubmit, reset } = useForm<FormInput>();\n\n  const isName = (name: string) => name.endsWith(\".ewc\");\n  const isAddress = (address: string) => /^0x[a-fA-F0-9]{40}$/.test(address);\n\n  const onSubmit = async ({ search }: FormInput) => {\n    if (loading)\n      return;\n    reset();\n    setLoading(true);\n    let newAddress = \"\";\n    if (isName(search)) { // ENS resolve\n      try {\n        newAddress = await web3?.eth.ens.getAddress(search) || \"\";\n      } catch (err) {\n        console.error(err);\n        setError(genericError);\n        if (err.message.startsWith(\"The resolver at 0x0000000000000000000000000000000000000000\"))\n          setError(notFoundError);\n      }\n    } else if (isAddress(search)) { // Explicit address\n      newAddress = search;\n    } else { // Invalid address\n      setError(unrecognizedError);\n      setLoading(false);\n    }\n    if (!newAddress || newAddress === address)\n      setLoading(false);\n    setAddress(newAddress);\n  }\n\n  const getAccountComponent = (address: string) => {\n    if (address === \"\" || account.current === undefined)\n      return null;\n    return <EwAccount account={account.current} address={address}></EwAccount>\n  }\n\n  useEffect(() => {\n    if (address) {\n      voltaApi.current.getAccountInfo(address)\n        .then(accountInfo => {\n          account.current = accountInfo;\n          setLoading(false);\n        }).catch(console.error)\n        .finally(() => setLoading(false));\n    }\n  }, [address]);\n\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>ENS service</Card.Title>\n        <div>\n          <Form className=\"form-h\" onSubmit={handleSubmit(onSubmit)}>\n            <InputGroup hasValidation>\n              <FormControl\n                {...register('search', {\n                  required: { value: true, message: emptyError },\n                  validate: (val: string) => isName(val) || isAddress(val) ? true : unrecognizedError\n                })}\n                type=\"search\"\n                placeholder=\"Search\"\n                isInvalid={errors.search?.type === \"required\" || errors.search?.type === \"validate\"}\n                aria-label=\"Search\"\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.search?.message}\n              </Form.Control.Feedback>\n            </InputGroup>\n            <Button variant=\"outline-success\" type=\"submit\" disabled={loading}>\n              <i className=\"fa fa-search\"></i>\n            </Button>\n          </Form>\n          <br></br>\n          {loading && <Spinner animation=\"border\"></Spinner>}\n          {!loading && (getAccountComponent(address) || (<p>{error}</p>))}\n        </div>\n      </Card.Body>\n    </Card >\n  );\n}\n\nexport default ENS;\n","import { Card } from 'react-bootstrap';\n\nfunction Home() {\n    return (\n        <Card>\n            <Card.Img variant=\"top\" />\n            <Card.Body>\n                <Card.Title>Energy Web DApp showcase</Card.Title>\n                <Card.Text>\n                    This is a simple DApp meant to showcase some of the peculiarities of the Energy Web ecosystem.\n                </Card.Text>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/key-manager-icon.1e677450.svg\";","export default __webpack_public_path__ + \"static/media/metamask-logo.05bfcf16.svg\";","export default __webpack_public_path__ + \"static/media/wallet-connect-icon.44297cab.svg\";","import {\n    IAM,\n    setCacheClientOptions,\n    setChainConfig,\n    WalletProvider\n} from \"iam-client-lib\";\nimport React, { useRef, useState } from \"react\";\nimport { Button, Card, Spinner } from \"react-bootstrap\";\nimport KMLogo from \"../../asset/key-manager-icon.svg\";\nimport metamaskLogo from \"../../asset/metamask-logo.svg\";\nimport walletconnectIcon from \"../../asset/wallet-connect-icon.svg\";\nimport \"./IAM.css\";\nimport { backendUrl, enrolmentUrl } from \"./IAM.json\";\n\nsetCacheClientOptions(73799, {\n    url: \"https://volta-identitycache.energyweb.org/\",\n});\nsetChainConfig(73799, {\n    rpcUrl: \"https://volta-rpc.energyweb.org\",\n});\n\ntype Role = {\n    name: string;\n    namespace: string;\n};\n\nfunction Iam() {\n    const iam = useRef<IAM>(new IAM());\n    const [roles, setRoles] = useState<Role[]>([]);\n    const [did, setDID] = useState<string>(\"\");\n    const [errored, setErrored] = useState<Boolean>(false);\n    const [loading, setLoading] = useState<Boolean>(false);\n    const [unauthorized, setUnauthorized] = useState<Boolean>(false);\n\n    const login = async function (initOptions?: { walletProvider: WalletProvider; }) {\n        setLoading(true);\n        setErrored(false);\n        setUnauthorized(false);\n        try {\n            const { identityToken, did } = await iam.current.initializeConnection(initOptions);\n\n            if (did) {\n                setDID(did);\n            }\n            if (identityToken) {\n                const options: RequestInit = {\n                    method: \"POST\",\n                    credentials: \"include\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: identityToken,\n                }\n                await fetch(`${backendUrl}/login`, options)\n            }\n\n            const options: RequestInit = {\n                method: \"GET\",\n                credentials: \"include\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n            }\n            const res = await fetch(`${backendUrl}/roles`, options);\n            const { data: roles } = await res.json() as { data: Role[] };\n            switch (res.status) {\n                case 200:\n                    setRoles(roles);\n                    break;\n                case 401:\n                    setUnauthorized(true);\n                    break;\n                default:\n                    setErrored(true);\n            }\n        } catch (err) {\n            console.error(err);\n            setErrored(true);\n        }\n        setLoading(false);\n    };\n\n    const logout = async function () {\n        setDID(\"\");\n        await iam.current.closeConnection();\n    };\n\n    const loadingMessage = (\n        <div>\n            <Spinner animation=\"border\" />\n            <span>Loading... (Please sign messages using your connected wallet)</span>\n        </div>\n    );\n\n    const enrolmentButton = enrolmentUrl && (\n        <a\n            href={`${enrolmentUrl}&returnUrl=${encodeURIComponent(\n                window.location.href\n            )}`}\n            className=\"button\"\n        >\n            <span>Enrol to test role</span>\n        </a>\n    );\n\n    const loginResults = (\n        <div>\n            <p>Hello user!</p>\n            <p>\n                Your decentralised identifier: <br />\n                <strong>{did}</strong>\n            </p>\n            {roles && roles.length > 0 ? (\n                <div className=\"rolesContainer\">\n                    <p>These are your validated roles:</p>\n                    {roles.map(({ name, namespace }) => (\n                        <p key={namespace}>\n                            <strong>{`${name}`}</strong>\n                            {` at ${namespace}`}\n                        </p>\n                    ))}\n                </div>\n            ) : (\n                <div>\n                    You do not have any issued role at the moment, please login into\n                    switchboard and search for apps, orgs to enrol.\n                </div>\n            )}\n            <div className=\"logoutContainer\">\n                {enrolmentButton}\n                <Button onClick={logout} className=\"button\">\n                    <span>Logout</span>\n                </Button>\n            </div>\n        </div>\n    );\n\n    const loginOptions = (\n        <div className=\"login-button-container\">\n            <Button onClick={() => login({ walletProvider: WalletProvider.WalletConnect })}>\n                <img\n                    alt=\"walletconnect logo\"\n                    className=\"walletconnect\"\n                    src={walletconnectIcon}\n                />\n                <span>Login with Wallet Connect</span>\n            </Button>\n            <Button onClick={() => login({ walletProvider: WalletProvider.MetaMask })}>\n                <img alt=\"metamask logo\" className=\"metamask\" src={metamaskLogo} />\n                <span>Login with Metamask</span>\n            </Button>\n            <Button onClick={() => login({ walletProvider: WalletProvider.EwKeyManager })}>\n                <img alt=\"metamask logo\" className=\"metamask\" src={KMLogo} />\n                <span>Login with EW Key Manager</span>\n            </Button>\n        </div>\n    );\n\n    const errorMessage = (\n        <div>\n            <p>\n                Error occurred with login.\n                <br />\n                If you rejected the signing requests, please try again and accept.\n                <br />\n                If this is your first time logging in, your account needs a small amount\n                of Volta token to create a DID Document.\n                <br />A Volta token can be obtained from the{\" \"}\n                <a href=\"https://voltafaucet.energyweb.org/\">Volta Faucet</a>.\n            </p>\n            {loginOptions}\n        </div>\n    );\n\n    const unauthorizedMessage = (\n        <div>\n            <p>\n                Unauthorized login response.\n                <br />\n                Please ensure that you have the necessary role claim.\n            </p>\n            <div className=\"enrolbuttonContainer\">\n                {enrolmentUrl && (\n                    <p>Use enrolment button to request necessary role.</p>\n                )}\n                {enrolmentButton}\n            </div>\n            {loginOptions}\n        </div>\n    );\n\n    const loginJsx = () => {\n        if (loading) {\n            return loadingMessage;\n        }\n        if (unauthorized) {\n            return unauthorizedMessage;\n        }\n        if (errored) {\n            return errorMessage;\n        }\n        if (did) {\n            return loginResults;\n        }\n        return loginOptions;\n    };\n\n    return (\n        <Card>\n            <Card.Body>\n                <Card.Title>IAM showcase</Card.Title>\n                {loginJsx()}\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default Iam;","import detectEthereumProvider from '@metamask/detect-provider';\nimport MetaMaskOnboarding from '@metamask/onboarding';\nimport React, { useEffect } from 'react';\nimport { Button, Card } from 'react-bootstrap';\nimport Web3 from 'web3';\nimport metamaskLogo from \"../../asset/metamask-logo.svg\";\nimport { WindowProvider } from '../../types/MetaMask';\nimport toast from '../Toast/Toast';\nimport { accountConnectionSentError, noAccountError, noProviderError } from './Login.json';\n\ntype Props = {\n    setAccounts: (account: string[]) => void;\n    setWeb3: (web3: Web3) => void;\n    setChain: (chain: string) => void;\n    web3?: Web3;\n    chain: string;\n};\n\nexport function Login({ setAccounts, setWeb3, setChain, web3, chain }: Props) {\n    const allowedChains = [\"volta\"];\n    const onboarding = React.useRef<MetaMaskOnboarding>(new MetaMaskOnboarding());\n\n    const handleAccounts = (accounts: string[]) => {\n        if (accounts.length > 0) {\n            setAccounts(accounts);\n            onboarding.current.stopOnboarding();\n        } else\n            toast(noAccountError, 'danger');\n    }\n\n    const onClick = async () => {\n        if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n            onboarding.current.stopOnboarding();\n            const provider = await detectEthereumProvider() as WindowProvider;\n            try {\n                await provider.request({ method: 'eth_requestAccounts' });\n            } catch (e) {\n                toast(accountConnectionSentError, 'danger');\n                return;\n            }\n            const currentWeb3 = web3 || new Web3(provider);\n            handleAccounts(await currentWeb3.eth.getAccounts());\n            setChain(await currentWeb3.eth.net.getNetworkType());\n        } else {\n            toast(noProviderError, 'danger');\n            onboarding.current.startOnboarding();\n        }\n    };\n\n    useEffect(() => {\n        const providerEventSetup = (provider: WindowProvider, newWeb3: Web3) => {\n            provider.removeListener('accountsChanged', setAccounts);\n            provider.removeListener('chainChanged', setChain);\n            provider.on('accountsChanged', setAccounts);\n            provider.on('chainChanged', async (_) => setChain(await newWeb3.eth.net.getNetworkType()));\n        }\n        const setup = async () => {\n            const provider = await detectEthereumProvider() as WindowProvider;\n            if (provider !== null) {\n                const newWeb3 = new Web3(provider);\n                const accounts = await newWeb3.eth.getAccounts();\n                const chain = await newWeb3.eth.net.getNetworkType();\n                console.log(`Web3 setted: ${web3}`);\n                if (accounts.length > 0) setAccounts(accounts);\n                setChain(chain);\n                setWeb3(newWeb3);\n                providerEventSetup(provider, newWeb3);\n            }\n        };\n        setup();\n    }, [setAccounts, setWeb3, setChain, web3])\n\n    return (\n        <Card className=\"text-center\">\n            <Card.Body>\n                <Card.Title>Login</Card.Title>\n                <div className=\"login-button-container\">\n                    <Button onClick={onClick}>\n                        <img alt=\"metamask logo\" className=\"metamask\" src={metamaskLogo} />\n                        <span>Login with Metamask</span>\n                    </Button>\n                </div>\n                {(!allowedChains.includes(chain) && chain !== \"\" &&\n                    <p className=\"label text-danger\">{chain} net is not supported.<br></br>Conntect to the volta testnet</p>)}\n            </Card.Body>\n        </Card>\n    );\n}\nexport default Login;","import React, { useState } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Web3 from 'web3';\nimport AppNav from '../AppNav/AppNav';\nimport ENS from '../ENS/ENS';\nimport Home from '../Home/Home';\nimport IAM from '../IAM/IAM';\nimport Login from '../Login/Login';\nimport './App.css';\n\nfunction App() {\n  const allowedChain = [\"volta\"];\n  const [web3, setWeb3] = useState<Web3>();\n  const [accounts, setAccounts] = useState<string[]>([]);\n  const [chain, setChain] = useState<string>(\"\");\n\n  const showMain = () => web3 !== undefined && accounts.length > 0 && allowedChain.includes(chain);\n\n  console.log(\"APP\");\n\n  return (\n    <>\n      <Router>\n        <AppNav accounts={accounts} chain={chain}></AppNav>\n        <main className=\"container-fluid\">\n          {showMain() && (\n            <Switch>\n              <Route path=\"/ens\" exact>\n                <ENS web3={web3}></ENS>\n              </Route>\n              <Route path=\"/iam\" exact>\n                <IAM></IAM>\n              </Route>\n              <Route path=\"/\" component={Home} />\n            </Switch>)}\n          {!showMain() && (\n            <Login web3={web3} chain={chain} setAccounts={setAccounts} setWeb3={setWeb3} setChain={setChain}></Login>\n          )}\n        </main>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n// import './deeppurple-amber.css';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}