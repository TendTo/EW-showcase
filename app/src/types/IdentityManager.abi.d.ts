/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type IdentityCreated = ContractEventLog<{
  identity: string;
  owner: string;
  at: string;
  0: string;
  1: string;
  2: string;
}>;
export type IdentityOfferCanceled = ContractEventLog<{
  identity: string;
  owner: string;
  oferedto: string;
  at: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type IdentityOfferRejected = ContractEventLog<{
  identity: string;
  owner: string;
  offeredTo: string;
  at: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type IdentityOffered = ContractEventLog<{
  identity: string;
  owner: string;
  offeredTo: string;
  at: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type IdentityTransferred = ContractEventLog<{
  identity: string;
  owner: string;
  at: string;
  0: string;
  1: string;
  2: string;
}>;

export interface IdentityManagerAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IdentityManagerAbi;
  clone(): IdentityManagerAbi;
  methods: {
    verified(identity: string): NonPayableTransactionObject<boolean>;

    compliant(identity: string): NonPayableTransactionObject<boolean>;

    identityOwner(identity: string): NonPayableTransactionObject<string>;

    createIdentity(_owner: string): NonPayableTransactionObject<void>;

    identityCreated(_owner: string): NonPayableTransactionObject<void>;

    identityOffered(_offeredTo: string): NonPayableTransactionObject<void>;

    identityAccepted(_owner: string): NonPayableTransactionObject<void>;

    identityRejected(_offeredTo: string): NonPayableTransactionObject<void>;

    identityOfferCanceled(
      _offeredTo: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    IdentityCreated(cb?: Callback<IdentityCreated>): EventEmitter;
    IdentityCreated(
      options?: EventOptions,
      cb?: Callback<IdentityCreated>
    ): EventEmitter;

    IdentityOfferCanceled(cb?: Callback<IdentityOfferCanceled>): EventEmitter;
    IdentityOfferCanceled(
      options?: EventOptions,
      cb?: Callback<IdentityOfferCanceled>
    ): EventEmitter;

    IdentityOfferRejected(cb?: Callback<IdentityOfferRejected>): EventEmitter;
    IdentityOfferRejected(
      options?: EventOptions,
      cb?: Callback<IdentityOfferRejected>
    ): EventEmitter;

    IdentityOffered(cb?: Callback<IdentityOffered>): EventEmitter;
    IdentityOffered(
      options?: EventOptions,
      cb?: Callback<IdentityOffered>
    ): EventEmitter;

    IdentityTransferred(cb?: Callback<IdentityTransferred>): EventEmitter;
    IdentityTransferred(
      options?: EventOptions,
      cb?: Callback<IdentityTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "IdentityCreated", cb: Callback<IdentityCreated>): void;
  once(
    event: "IdentityCreated",
    options: EventOptions,
    cb: Callback<IdentityCreated>
  ): void;

  once(
    event: "IdentityOfferCanceled",
    cb: Callback<IdentityOfferCanceled>
  ): void;
  once(
    event: "IdentityOfferCanceled",
    options: EventOptions,
    cb: Callback<IdentityOfferCanceled>
  ): void;

  once(
    event: "IdentityOfferRejected",
    cb: Callback<IdentityOfferRejected>
  ): void;
  once(
    event: "IdentityOfferRejected",
    options: EventOptions,
    cb: Callback<IdentityOfferRejected>
  ): void;

  once(event: "IdentityOffered", cb: Callback<IdentityOffered>): void;
  once(
    event: "IdentityOffered",
    options: EventOptions,
    cb: Callback<IdentityOffered>
  ): void;

  once(event: "IdentityTransferred", cb: Callback<IdentityTransferred>): void;
  once(
    event: "IdentityTransferred",
    options: EventOptions,
    cb: Callback<IdentityTransferred>
  ): void;
}
