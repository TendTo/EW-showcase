/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type TransactionSent = ContractEventLog<{
  data: string;
  value: string;
  0: string;
  1: string;
}>;

export interface OfferableIdentityAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OfferableIdentityAbi;
  clone(): OfferableIdentityAbi;
  methods: {
    offeredTo(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    init(_owner: string): NonPayableTransactionObject<void>;

    offer(_offeredTo: string): NonPayableTransactionObject<void>;

    acceptOffer(): NonPayableTransactionObject<void>;

    rejectOffer(): NonPayableTransactionObject<void>;

    cancelOffer(): NonPayableTransactionObject<void>;

    sendTransaction(
      to: string,
      data: string | number[],
      value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    TransactionSent(cb?: Callback<TransactionSent>): EventEmitter;
    TransactionSent(
      options?: EventOptions,
      cb?: Callback<TransactionSent>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "TransactionSent", cb: Callback<TransactionSent>): void;
  once(
    event: "TransactionSent",
    options: EventOptions,
    cb: Callback<TransactionSent>
  ): void;
}
